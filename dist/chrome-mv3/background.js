var background=function(){"use strict";var c,u;function l(e){return e==null||typeof e=="function"?{main:e}:e}const d=async()=>(await chrome.storage.local.get("blocked_sites")).blocked_sites||[],m=e=>{const n=new Set;return e.map((r,s)=>{let t=1e6+s;for(;n.has(t);)t++;return n.add(t),{id:t,priority:1,action:{type:"block"},condition:{urlFilter:`||${r}^`,resourceTypes:["main_frame","sub_frame","script"]}}})},h=l(()=>{let e=new Set;async function n(r){const s=m(r),t=new Set(s.map(o=>o.id)),b=Array.from(e).filter(o=>!t.has(o)),g=s.filter(o=>!e.has(o.id));try{await chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:b,addRules:g}),e=t}catch(o){console.error("Failed to update rules",o)}}chrome.runtime.onInstalled.addListener(async()=>{const r=await d();await n(r)}),chrome.storage.onChanged.addListener(r=>{if(r.blocked_sites){const s=r.blocked_sites.newValue||[];n(s)}}),chrome.runtime.onSuspend.addListener(async()=>{await chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:Array.from(e)}),e.clear()})});function w(){}(u=(c=globalThis.browser)==null?void 0:c.runtime)!=null&&u.id?globalThis.browser:globalThis.chrome;function i(e,...n){}const f={debug:(...e)=>i(console.debug,...e),log:(...e)=>i(console.log,...e),warn:(...e)=>i(console.warn,...e),error:(...e)=>i(console.error,...e)};let a;try{a=h.main(),a instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(e){throw f.error("The background crashed on startup!"),e}return a}();
background;
